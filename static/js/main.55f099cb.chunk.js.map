{"version":3,"sources":["base_components/Loading.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_bootstrap__WEBPACK_IMPORTED_MODULE_1__","Loading","_ref","component","_ref$spinnerAnimation","spinnerAnimation","a","createElement","Suspense","fallback","animation","variant","Header","react_default","Jumbotron","Container","style","marginLeft","Row","href","target","rel","Image","src","rounded","App","CardContainer","React","lazy","Promise","all","e","then","bind","AboutMe","className","components_Header","Tabs","defaultActiveKey","id","marginBottom","Tab","eventKey","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAUeI,IAPC,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,UAAHC,EAAAF,EAAcG,wBAAd,IAAAD,EAAiC,SAAjCA,EAAA,OACdN,EAAAQ,EAAAC,cAACT,EAAAQ,EAAME,SAAP,CACEC,SAAUX,EAAAQ,EAAAC,cAACP,EAAA,EAAD,CAASU,UAAWL,EAAkBM,QAAQ,eAEvDR,0OCqBUS,EAzBA,kBACbC,EAAAP,EAAAC,cAACO,EAAA,EAAD,KACED,EAAAP,EAAAC,cAACQ,EAAA,EAAD,CAAWC,MAAO,CAAEC,WAAY,SAC9BJ,EAAAP,EAAAC,cAACW,EAAA,EAAD,KACEL,EAAAP,EAAAC,cAAA,KACEY,KAAK,yCACLC,OAAO,SACPC,IAAI,uBAEJR,EAAAP,EAAAC,cAACe,EAAA,EAAD,CACEC,IAAI,oEACJC,SAAO,MAIbX,EAAAP,EAAAC,cAACW,EAAA,EAAD,KACEL,EAAAP,EAAAC,cAAA,0BAEFM,EAAAP,EAAAC,cAACW,EAAA,EAAD,KACEL,EAAAP,EAAAC,cAAA,mECUOkB,mLAzBX,IAAMC,EAAgBC,IAAMC,KAAK,kBAC/BC,QAAAC,IAAA,CAAAjC,EAAAkC,EAAA,GAAAlC,EAAAkC,EAAA,MAAAC,KAAAnC,EAAAoC,KAAA,aAEIC,EAAUP,IAAMC,KAAK,kBAAM/B,EAAAkC,EAAA,GAAAC,KAAAnC,EAAAoC,KAAA,aAEjC,OACEpB,EAAAP,EAAAC,cAAA,OAAK4B,UAAU,OACbtB,EAAAP,EAAAC,cAAC6B,EAAD,MACAvB,EAAAP,EAAAC,cAAC8B,EAAA,EAAD,CACEC,iBAAiB,aACjBC,GAAG,2BACHvB,MAAO,CAAEwB,aAAc,SAEvB3B,EAAAP,EAAAC,cAACkC,EAAA,EAAD,CAAKC,SAAS,aAAaC,MAAM,eAC/B9B,EAAAP,EAAAC,cAACN,EAAA,EAAD,CAASE,UAAWU,EAAAP,EAAAC,cAACmB,EAAD,SAEtBb,EAAAP,EAAAC,cAACkC,EAAA,EAAD,CAAKC,SAAS,QAAQC,MAAM,SAC1B9B,EAAAP,EAAAC,cAACN,EAAA,EAAD,CAASE,UAAWU,EAAAP,EAAAC,cAAC2B,EAAD,kBAnBdP,IAAMiB,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAP,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.55f099cb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loading = ({ component, spinnerAnimation = \"border\" }) => (\n  <React.Suspense\n    fallback={<Spinner animation={spinnerAnimation} variant=\"secondary\" />}\n  >\n    {component}\n  </React.Suspense>\n);\nexport default Loading;\n","import React from \"react\";\nimport { Jumbotron, Container, Row, Image } from \"react-bootstrap\";\n\nconst Header = () => (\n  <Jumbotron>\n    <Container style={{ marginLeft: \"12px\" }}>\n      <Row>\n        <a\n          href=\"https://devexpress.github.io/testcafe/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Image\n            src=\"https://devexpress.github.io/testcafe/images/site-header-logo.svg\"\n            rounded\n          />\n        </a>\n      </Row>\n      <Row>\n        <h1>Cheat Sheet</h1>\n      </Row>\n      <Row>\n        <p>Copy TestCafe commands and code and stuff!</p>\n      </Row>\n    </Container>\n  </Jumbotron>\n);\n\nexport default Header;\n","import React from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport Header from \"./components/Header\";\nimport Loading from \"./base_components/Loading\";\n\nclass App extends React.Component {\n  render() {\n    const CardContainer = React.lazy(() =>\n      import(\"./components/CardContainer\")\n    );\n    const AboutMe = React.lazy(() => import(\"./components/AboutMe.js\"));\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <Tabs\n          defaultActiveKey=\"cheatsheet\"\n          id=\"uncontrolled-tab-example\"\n          style={{ marginBottom: \"10px\" }}\n        >\n          <Tab eventKey=\"cheatsheet\" title=\"Cheat Sheet\">\n            <Loading component={<CardContainer />} />\n          </Tab>\n          <Tab eventKey=\"about\" title=\"About\">\n            <Loading component={<AboutMe />} />\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}