{"version":3,"sources":["base_components/MultiCodeCard.js","components/cards/SelectActionCard.js"],"names":["CodeCard","_ref","cardTitle","codeSections","_useState","useState","_useState2","Object","_home_travis_build_byrne_greg_testcafe_cheat_sheet_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isShowingOptions","setIsShowingOptions","_useState3","_useState4","isShowingExample","setIsShowingExample","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react_bootstrap__WEBPACK_IMPORTED_MODULE_2__","Header","map","_ref2","description","language","code","options","example","key","substring","Body","Text","_CodeHighlight__WEBPACK_IMPORTED_MODULE_8__","style","display","document","queryCommandSupported","react_copy_to_clipboard__WEBPACK_IMPORTED_MODULE_7__","text","onCopy","react_bootstrap__WEBPACK_IMPORTED_MODULE_3__","variant","Title","react_bootstrap__WEBPACK_IMPORTED_MODULE_4__","paddingBottom","react_bootstrap__WEBPACK_IMPORTED_MODULE_5__","type","name","defaultValue","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","value","onClick","Fragment","__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_snippets__WEBPACK_IMPORTED_MODULE_1__","_base_components_MultiCodeCard__WEBPACK_IMPORTED_MODULE_2__","SelectActionCard","actions_select","title"],"mappings":"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","file":"static/js/15.71cb7e30.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Card,\n  Button,\n  ButtonToolbar,\n  ToggleButtonGroup,\n  ToggleButton\n} from \"react-bootstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { CodeHighlight } from \"./CodeHighlight\";\n\nconst CodeCard = ({ cardTitle, codeSections }) => {\n  const [isShowingOptions, setIsShowingOptions] = useState(false);\n  const [isShowingExample, setIsShowingExample] = useState(false);\n\n  return (\n    <Card>\n      <Card.Header>{cardTitle}</Card.Header>\n      {codeSections.map(({ description, language, code, options, example }) => (\n        <div key={code.substring(0, 16)}>\n          <Card.Body>\n            {description ? <Card.Text>{description}</Card.Text> : null}\n            <CodeHighlight\n              style={{ display: \"inline-table\" }}\n              language={language}\n            >\n              {code}\n            </CodeHighlight>\n            {document.queryCommandSupported(\"copy\") && (\n              <CopyToClipboard text={code} onCopy={() => {}}>\n                <Button variant=\"info\">Copy</Button>\n              </CopyToClipboard>\n            )}\n          </Card.Body>\n          {options ? (\n            <Card.Body>\n              <Card.Title>Options</Card.Title>\n              <ButtonToolbar style={{ paddingBottom: \"10px\" }}>\n                <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={2}>\n                  <ToggleButton\n                    variant=\"outline-secondary\"\n                    value={1}\n                    onClick={() => setIsShowingOptions(true)}\n                  >\n                    Show\n                  </ToggleButton>\n                  <ToggleButton\n                    variant=\"outline-secondary\"\n                    value={2}\n                    onClick={() => setIsShowingOptions(false)}\n                  >\n                    Hide\n                  </ToggleButton>\n                </ToggleButtonGroup>\n              </ButtonToolbar>\n              {isShowingOptions ? (\n                <>\n                  <CodeHighlight\n                    style={{ display: \"inline-table\" }}\n                    language={language}\n                  >\n                    {options}\n                  </CodeHighlight>\n                  {document.queryCommandSupported(\"copy\") && (\n                    <CopyToClipboard text={code} onCopy={() => {}}>\n                      <Button variant=\"info\">Copy</Button>\n                    </CopyToClipboard>\n                  )}\n                </>\n              ) : null}\n            </Card.Body>\n          ) : null}\n\n          {example ? (\n            <Card.Body>\n              <Card.Title>Example</Card.Title>\n              <ButtonToolbar style={{ paddingBottom: \"10px\" }}>\n                <ToggleButtonGroup type=\"radio\" name=\"example\" defaultValue={2}>\n                  <ToggleButton\n                    variant=\"outline-secondary\"\n                    value={1}\n                    onClick={() => setIsShowingExample(true)}\n                  >\n                    Show\n                  </ToggleButton>\n                  <ToggleButton\n                    variant=\"outline-secondary\"\n                    value={2}\n                    onClick={() => setIsShowingExample(false)}\n                  >\n                    Hide\n                  </ToggleButton>\n                </ToggleButtonGroup>\n              </ButtonToolbar>\n              {isShowingExample ? (\n                <>\n                  <CodeHighlight\n                    style={{ display: \"inline-table\" }}\n                    language={language}\n                  >\n                    {example}\n                  </CodeHighlight>\n                  {document.queryCommandSupported(\"copy\") && (\n                    <CopyToClipboard text={code} onCopy={() => {}}>\n                      <Button variant=\"info\">Copy</Button>\n                    </CopyToClipboard>\n                  )}\n                </>\n              ) : null}\n            </Card.Body>\n          ) : null}\n        </div>\n      ))}\n    </Card>\n  );\n};\n\nexport default CodeCard;\n","import React from \"react\";\nimport { actions_select } from \"../../snippets\";\nimport MultiCodeCard from \"../../base_components/MultiCodeCard\";\n\nconst SelectActionCard = () => (\n  <MultiCodeCard\n    cardTitle={actions_select.title}\n    codeSections={actions_select.codeSections}\n  />\n);\n\nexport default SelectActionCard;\n"],"sourceRoot":""}