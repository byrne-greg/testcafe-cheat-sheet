{"version":3,"sources":["components/cards/DragActionCard.js","base_components/CodeCard.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_snippets__WEBPACK_IMPORTED_MODULE_1__","_base_components_CodeCard__WEBPACK_IMPORTED_MODULE_2__","DragActionCard","a","createElement","cardTitle","actions_drag","title","fullDocLink","codeSnippet","code","language","options","example","description","CodeCard","_ref","_ref$codeSnippet","_useState","useState","_useState2","Object","_home_travis_build_byrne_greg_testcafe_cheat_sheet_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isShowingOptions","setIsShowingOptions","_useState3","_useState4","isShowingExample","setIsShowingExample","react__WEBPACK_IMPORTED_MODULE_1___default","react_bootstrap__WEBPACK_IMPORTED_MODULE_2__","_base_components_CardHeader__WEBPACK_IMPORTED_MODULE_7__","docLink","Body","Text","_CodeHighlight__WEBPACK_IMPORTED_MODULE_6__","Title","react_bootstrap__WEBPACK_IMPORTED_MODULE_3__","style","paddingBottom","react_bootstrap__WEBPACK_IMPORTED_MODULE_4__","type","name","defaultValue","react_bootstrap__WEBPACK_IMPORTED_MODULE_5__","variant","value","onClick"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAkBeQ,UAdQ,kBACrBJ,EAAAK,EAAAC,cAACH,EAAA,EAAD,CACEI,UAAWC,IAAaC,MACxBC,YAAaF,IAAaE,YAC1BC,YAAa,CACXC,KAAMJ,IAAaI,KACnBC,SAAUL,IAAaK,SACvBC,QAASN,IAAaM,QACtBC,QAASP,IAAaO,SAExBC,YAAaR,IAAaQ,gICsEfC,IAzEE,SAAAC,GAKX,IAJJX,EAIIW,EAJJX,UACAG,EAGIQ,EAHJR,YAGIS,EAAAD,EAFJP,YAAeC,EAEXO,EAFWP,KAAMC,EAEjBM,EAFiBN,SAAUC,EAE3BK,EAF2BL,QAASC,EAEpCI,EAFoCJ,QACxCC,EACIE,EADJF,YACII,EAC4CC,oBAAS,GADrDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACGK,EADHH,EAAA,GACqBI,EADrBJ,EAAA,GAAAK,EAE4CN,oBAAS,GAFrDO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEGE,EAFHD,EAAA,GAEqBE,EAFrBF,EAAA,GAIJ,OACEG,EAAA1B,EAAAC,cAAC0B,EAAA,EAAD,KACED,EAAA1B,EAAAC,cAAC2B,EAAA,EAAD,CAAYxB,MAAOF,EAAW2B,QAASxB,IACvCqB,EAAA1B,EAAAC,cAAC0B,EAAA,EAAKG,KAAN,KACGnB,EAAce,EAAA1B,EAAAC,cAAC0B,EAAA,EAAKI,KAAN,KAAYpB,GAA2B,KACtDe,EAAA1B,EAAAC,cAAC+B,EAAA,EAAD,CAAoBzB,KAAMA,EAAMC,SAAUA,KAE3CC,EACCiB,EAAA1B,EAAAC,cAAC0B,EAAA,EAAKG,KAAN,KACEJ,EAAA1B,EAAAC,cAAC0B,EAAA,EAAKM,MAAN,gBACAP,EAAA1B,EAAAC,cAACiC,EAAA,EAAD,CAAeC,MAAO,CAAEC,cAAe,SACrCV,EAAA1B,EAAAC,cAACoC,EAAA,EAAD,CAAmBC,KAAK,QAAQC,KAAK,UAAUC,aAAc,GAC3Dd,EAAA1B,EAAAC,cAACwC,EAAA,EAAD,CACEC,QAAQ,oBACRC,MAAO,EACPC,QAAS,kBAAMvB,GAAoB,KAHrC,QAOAK,EAAA1B,EAAAC,cAACwC,EAAA,EAAD,CACEC,QAAQ,oBACRC,MAAO,EACPC,QAAS,kBAAMvB,GAAoB,KAHrC,UASHD,EACCM,EAAA1B,EAAAC,cAAC+B,EAAA,EAAD,CAAexB,SAAUA,GAAWC,GAClC,MAEJ,KAEHC,EACCgB,EAAA1B,EAAAC,cAAC0B,EAAA,EAAKG,KAAN,KACEJ,EAAA1B,EAAAC,cAAC0B,EAAA,EAAKM,MAAN,gBACAP,EAAA1B,EAAAC,cAACiC,EAAA,EAAD,CAAeC,MAAO,CAAEC,cAAe,SACrCV,EAAA1B,EAAAC,cAACoC,EAAA,EAAD,CAAmBC,KAAK,QAAQC,KAAK,UAAUC,aAAc,GAC3Dd,EAAA1B,EAAAC,cAACwC,EAAA,EAAD,CACEC,QAAQ,oBACRC,MAAO,EACPC,QAAS,kBAAMnB,GAAoB,KAHrC,QAOAC,EAAA1B,EAAAC,cAACwC,EAAA,EAAD,CACEC,QAAQ,oBACRC,MAAO,EACPC,QAAS,kBAAMnB,GAAoB,KAHrC,UASHD,EACCE,EAAA1B,EAAAC,cAAC+B,EAAA,EAAD,CAAexB,SAAUA,GAAWE,GAClC,MAEJ","file":"static/js/14.925e6d76.chunk.js","sourcesContent":["import React from \"react\";\nimport { actions_drag } from \"../../snippets\";\nimport CodeCard from \"../../base_components/CodeCard\";\n\nconst DragActionCard = () => (\n  <CodeCard\n    cardTitle={actions_drag.title}\n    fullDocLink={actions_drag.fullDocLink}\n    codeSnippet={{\n      code: actions_drag.code,\n      language: actions_drag.language,\n      options: actions_drag.options,\n      example: actions_drag.example\n    }}\n    description={actions_drag.description}\n  />\n);\n\nexport default DragActionCard;\n","import React, { useState } from \"react\";\nimport {\n  Card,\n  ButtonToolbar,\n  ToggleButtonGroup,\n  ToggleButton\n} from \"react-bootstrap\";\n\nimport { CodeHighlight, MultiCodeHighlight } from \"./CodeHighlight\";\nimport CardHeader from \"../base_components/CardHeader\";\n\nconst CodeCard = ({\n  cardTitle,\n  fullDocLink,\n  codeSnippet: { code, language, options, example },\n  description\n}) => {\n  const [isShowingOptions, setIsShowingOptions] = useState(false);\n  const [isShowingExample, setIsShowingExample] = useState(false);\n\n  return (\n    <Card>\n      <CardHeader title={cardTitle} docLink={fullDocLink} />\n      <Card.Body>\n        {description ? <Card.Text>{description}</Card.Text> : null}\n        <MultiCodeHighlight code={code} language={language} />\n      </Card.Body>\n      {options ? (\n        <Card.Body>\n          <Card.Title>Options</Card.Title>\n          <ButtonToolbar style={{ paddingBottom: \"10px\" }}>\n            <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={2}>\n              <ToggleButton\n                variant=\"outline-secondary\"\n                value={1}\n                onClick={() => setIsShowingOptions(true)}\n              >\n                Show\n              </ToggleButton>\n              <ToggleButton\n                variant=\"outline-secondary\"\n                value={2}\n                onClick={() => setIsShowingOptions(false)}\n              >\n                Hide\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </ButtonToolbar>\n          {isShowingOptions ? (\n            <CodeHighlight language={language}>{options}</CodeHighlight>\n          ) : null}\n        </Card.Body>\n      ) : null}\n\n      {example ? (\n        <Card.Body>\n          <Card.Title>Example</Card.Title>\n          <ButtonToolbar style={{ paddingBottom: \"10px\" }}>\n            <ToggleButtonGroup type=\"radio\" name=\"example\" defaultValue={2}>\n              <ToggleButton\n                variant=\"outline-secondary\"\n                value={1}\n                onClick={() => setIsShowingExample(true)}\n              >\n                Show\n              </ToggleButton>\n              <ToggleButton\n                variant=\"outline-secondary\"\n                value={2}\n                onClick={() => setIsShowingExample(false)}\n              >\n                Hide\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </ButtonToolbar>\n          {isShowingExample ? (\n            <CodeHighlight language={language}>{example}</CodeHighlight>\n          ) : null}\n        </Card.Body>\n      ) : null}\n    </Card>\n  );\n};\n\nexport default CodeCard;\n"],"sourceRoot":""}