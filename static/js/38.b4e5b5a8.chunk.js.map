{"version":3,"sources":["components/search/search_mappings.js","components/CardContainer.js"],"names":["LazyInstallCard","React","lazy","Promise","all","__webpack_require__","e","then","bind","LazyRunningTestsCard","LazySimpleTestCard","LazyBrowserSupportCard","LazyFixtureCard","LazySkipTestCard","LazyDebugCard","LazyClickActionCard","LazyDragActionCard","LazyHoverActionCard","LazySelectActionCard","LazyTypeTextActionCard","LazyPressKeyActionCard","LazyNavigateActionCard","LazyResizeWindowActionCard","LazyScreenshotActionCard","LazyDeepEqualAssertCard","LazyNotDeepEqualAssertCard","LazyContainsAssertCard","LazyNotContainsAssertCard","LazyOkAssertCard","LazyNotOkAssertCard","LazyGreaterThanAssertCard","LazyGreaterThanEqualToAssertCard","LazyLessThanAssertCard","LazyLessThanEqualToAssertCard","LazyMatchesAssertCard","LazyNotMatchesAssertCard","LazyTypeOfAssertCard","LazyNotTypeOfAssertCard","LazyWithinAssertCard","LazyNotWithinAssertCard","id","getId","mappings","keywords","getComponent","react_default","a","createElement","Loading","key","component","spinnerAnimation","Search","_ref","handleChange","InputGroup","style","marginTop","marginBottom","Prepend","Text","role","aria-label","Form","Control","type","placeholder","onChange","target","value","CardContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filterValue","assertThisInitialized","setState","_this2","filteredSearchComponents","search_mappings","filter","mapping","foundValue","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","includes","err","return","renderSearchComponents","mappingArray","map","Fragment","CardColumns","Navbar","bg","variant","fixed","CardContainer_Search","Component"],"mappings":"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","file":"static/js/38.b4e5b5a8.chunk.js","sourcesContent":["import React from \"react\";\nimport Loading from \"../../base_components/Loading\";\n\nconst LazyInstallCard = React.lazy(() => import(\"../cards/InstallCard\"));\nconst LazyRunningTestsCard = React.lazy(() =>\n  import(\"../cards/RunningTestsCard\")\n);\nconst LazySimpleTestCard = React.lazy(() => import(\"../cards/SimpleTestCard\"));\nconst LazyBrowserSupportCard = React.lazy(() =>\n  import(\"../cards/BrowserSupportCard\")\n);\nconst LazyFixtureCard = React.lazy(() => import(\"../cards/FixtureCard\"));\nconst LazySkipTestCard = React.lazy(() => import(\"../cards/SkipTestCard\"));\nconst LazyDebugCard = React.lazy(() => import(\"../cards/DebugCard\"));\n\nconst LazyClickActionCard = React.lazy(() =>\n  import(\"../cards/actions/ClickActionCard\")\n);\nconst LazyDragActionCard = React.lazy(() =>\n  import(\"../cards/actions/DragActionCard\")\n);\nconst LazyHoverActionCard = React.lazy(() =>\n  import(\"../cards/actions/HoverActionCard\")\n);\nconst LazySelectActionCard = React.lazy(() =>\n  import(\"../cards/actions/SelectActionCard\")\n);\nconst LazyTypeTextActionCard = React.lazy(() =>\n  import(\"../cards/actions/TypeTextActionCard\")\n);\nconst LazyPressKeyActionCard = React.lazy(() =>\n  import(\"../cards/actions/PressKeyActionCard\")\n);\nconst LazyNavigateActionCard = React.lazy(() =>\n  import(\"../cards/actions/NavigateActionCard\")\n);\nconst LazyResizeWindowActionCard = React.lazy(() =>\n  import(\"../cards/actions/ResizeWindowActionCard\")\n);\nconst LazyScreenshotActionCard = React.lazy(() =>\n  import(\"../cards/actions/ScreenshotActionCard\")\n);\n\nconst LazyDeepEqualAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/DeepEqualAssertCard\")\n);\nconst LazyNotDeepEqualAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/NotDeepEqualAssertCard\")\n);\nconst LazyContainsAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/ContainsAssertCard\")\n);\nconst LazyNotContainsAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/NotContainsAssertCard\")\n);\nconst LazyOkAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/OkAssertCard\")\n);\nconst LazyNotOkAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/NotOkAssertCard\")\n);\nconst LazyGreaterThanAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/GreaterThanAssertCard\")\n);\nconst LazyGreaterThanEqualToAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/GreaterThanEqualToAssertCard\")\n);\nconst LazyLessThanAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/LessThanAssertCard\")\n);\nconst LazyLessThanEqualToAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/LessThanEqualToAssertCard\")\n);\nconst LazyMatchesAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/MatchesAssertCard\")\n);\nconst LazyNotMatchesAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/NotMatchesAssertCard\")\n);\nconst LazyTypeOfAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/TypeOfAssertCard\")\n);\nconst LazyNotTypeOfAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/NotTypeOfAssertCard\")\n);\nconst LazyWithinAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/WithinAssertCard\")\n);\nconst LazyNotWithinAssertCard = React.lazy(() =>\n  import(\"../cards/asserts/NotWithinAssertCard\")\n);\n\nlet id = 0;\nconst getId = () => {\n  return ++id;\n};\n\nconst mappings = [\n  {\n    keywords: [\"install\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyInstallCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"running\", \"test\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyRunningTestsCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"example\", \"test\", \"simple\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazySimpleTestCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"browser support\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyBrowserSupportCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"fixture\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyFixtureCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"skipping\", \"only\", \"test\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazySkipTestCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"debug\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyDebugCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"click\", \" double click\", \" right click\", \"action\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyClickActionCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"drag\", \"action\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyDragActionCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"hover\", \"action\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyHoverActionCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"select\", \"action\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazySelectActionCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"type\", \"typing\", \"text\", \"action\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyTypeTextActionCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"press\", \"key\", \"action\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyPressKeyActionCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"navigate\", \"navigation\", \"url\", \"go to\", \"action\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyNavigateActionCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"resize\", \"window\", \"action\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyResizeWindowActionCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"screenshot\", \"snapshot\", \"action\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyScreenshotActionCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n\n  {\n    keywords: [\"assert\", \"deep\", \"equal\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyDeepEqualAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"not\", \"deep\", \"equal\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyNotDeepEqualAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"contains\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyContainsAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"not\", \"contains\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyNotContainsAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"ok\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyOkAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"not\", \"ok\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyNotOkAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"greater\", \"than\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyGreaterThanAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"greater\", \"than\", \"equal\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyGreaterThanEqualToAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"less\", \"than\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyLessThanAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"less\", \"than\", \"equal\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyLessThanEqualToAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"matches\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyMatchesAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"not\", \"matches\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyNotMatchesAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"type of\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyTypeOfAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"not\", \"type of\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyNotTypeOfAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"within\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyWithinAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  },\n  {\n    keywords: [\"assert\", \"not\", \"within\"],\n    getComponent: () => (\n      <Loading\n        key={getId()}\n        component={<LazyNotWithinAssertCard />}\n        spinnerAnimation=\"grow\"\n      />\n    )\n  }\n];\n\nexport default mappings;\n","import React from \"react\";\nimport { CardColumns, InputGroup, Form, Navbar } from \"react-bootstrap\";\nimport search_mappings from \"./search/search_mappings\";\n\nconst Search = ({ handleChange }) => (\n  <InputGroup style={{ marginTop: \"12px\", marginBottom: \"12px\" }}>\n    <InputGroup.Prepend>\n      <InputGroup.Text id=\"inputGroupPrepend\">\n        <span role=\"img\" aria-label=\"search\">\n          🔎\n        </span>\n      </InputGroup.Text>\n    </InputGroup.Prepend>\n    <Form.Control\n      type=\"text\"\n      placeholder=\"Search for ...\"\n      aria-label=\"inputGroupPrepend\"\n      onChange={e => handleChange(e.target.value)}\n    />\n  </InputGroup>\n);\n\nclass CardContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      filterValue: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value) {\n    this.setState({ filterValue: value });\n  }\n\n  render() {\n    const filteredSearchComponents = search_mappings.filter(mapping => {\n      let foundValue = false;\n      for (const keyword of mapping.keywords) {\n        if (keyword.includes(this.state.filterValue)) {\n          foundValue = true;\n          break;\n        }\n      }\n      return foundValue;\n    });\n\n    const renderSearchComponents = mappingArray =>\n      mappingArray.map(mapping => mapping.getComponent());\n\n    return (\n      <>\n        <CardColumns>\n          {this.state.filterValue\n            ? // mapped only when there is a filter value\n              renderSearchComponents(filteredSearchComponents)\n            : // map everything by default\n              renderSearchComponents(search_mappings)}\n        </CardColumns>\n        <Navbar bg=\"light\" variant=\"light\" fixed=\"bottom\">\n          <Search handleChange={this.handleChange} />\n        </Navbar>\n      </>\n    );\n  }\n}\n\nexport default CardContainer;\n"],"sourceRoot":""}