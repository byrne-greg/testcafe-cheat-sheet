{"version":3,"sources":["components/cards/ClickActionCard.js","base_components/CardLink.js","base_components/CodeCard.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_snippets__WEBPACK_IMPORTED_MODULE_1__","_base_components_CodeCard__WEBPACK_IMPORTED_MODULE_2__","_base_components_CardLink__WEBPACK_IMPORTED_MODULE_3__","ClickActionCard","a","createElement","cardTitle","text","actions_click","title","href","fullDocLink","codeSnippet","code","language","options","example","description","react_bootstrap__WEBPACK_IMPORTED_MODULE_1__","CardLink","_ref","withPreceedingSpace","withSucceedingSpace","displayText","concat","Link","target","rel","CodeCard","_ref$codeSnippet","_useState","useState","_useState2","Object","_home_travis_build_byrne_greg_testcafe_cheat_sheet_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isShowingOptions","setIsShowingOptions","_useState3","_useState4","isShowingExample","setIsShowingExample","react__WEBPACK_IMPORTED_MODULE_1___default","react_bootstrap__WEBPACK_IMPORTED_MODULE_2__","Header","Body","Text","_CodeHighlight__WEBPACK_IMPORTED_MODULE_8__","style","display","document","queryCommandSupported","react_copy_to_clipboard__WEBPACK_IMPORTED_MODULE_7__","onCopy","react_bootstrap__WEBPACK_IMPORTED_MODULE_3__","variant","Title","react_bootstrap__WEBPACK_IMPORTED_MODULE_4__","paddingBottom","react_bootstrap__WEBPACK_IMPORTED_MODULE_5__","type","name","defaultValue","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","value","onClick","Fragment"],"mappings":"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","file":"static/js/8.94a1f4e6.chunk.js","sourcesContent":["import React from \"react\";\nimport { actions_click } from \"../../snippets\";\nimport CodeCard from \"../../base_components/CodeCard\";\nimport CardLink from \"../../base_components/CardLink\";\n\nconst ClickActionCard = () => (\n  <CodeCard\n    cardTitle={\n      <CardLink text={actions_click.title} href={actions_click.fullDocLink} />\n    }\n    codeSnippet={{\n      code: actions_click.code,\n      language: actions_click.language,\n      options: actions_click.options,\n      example: actions_click.example\n    }}\n    description={actions_click.description}\n  />\n);\n\nexport default ClickActionCard;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nconst CardLink = ({ text, href, withPreceedingSpace, withSucceedingSpace }) => {\n  let displayText = text;\n  if (withPreceedingSpace) {\n    displayText = ` ${displayText}`;\n  }\n  if (withSucceedingSpace) {\n    displayText = `${displayText} `;\n  }\n  return (\n    <Card.Link href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      {displayText}\n    </Card.Link>\n  );\n};\nexport default CardLink;\n","import React, { useState } from \"react\";\nimport {\n  Card,\n  Button,\n  ButtonToolbar,\n  ToggleButtonGroup,\n  ToggleButton\n} from \"react-bootstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { CodeHighlight } from \"./CodeHighlight\";\n\nconst CodeCard = ({\n  cardTitle,\n  codeSnippet: { code, language, options, example },\n  description\n}) => {\n  const [isShowingOptions, setIsShowingOptions] = useState(false);\n  const [isShowingExample, setIsShowingExample] = useState(false);\n\n  return (\n    <Card>\n      <Card.Header>{cardTitle}</Card.Header>\n      <Card.Body>\n        {description ? <Card.Text>{description}</Card.Text> : null}\n        <CodeHighlight style={{ display: \"inline-table\" }} language={language}>\n          {code}\n        </CodeHighlight>\n        {document.queryCommandSupported(\"copy\") && (\n          <CopyToClipboard text={code} onCopy={() => {}}>\n            <Button variant=\"info\">Copy</Button>\n          </CopyToClipboard>\n        )}\n      </Card.Body>\n      {options ? (\n        <Card.Body>\n          <Card.Title>Options</Card.Title>\n          <ButtonToolbar style={{ paddingBottom: \"10px\" }}>\n            <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={2}>\n              <ToggleButton\n                variant=\"outline-secondary\"\n                value={1}\n                onClick={() => setIsShowingOptions(true)}\n              >\n                Show\n              </ToggleButton>\n              <ToggleButton\n                variant=\"outline-secondary\"\n                value={2}\n                onClick={() => setIsShowingOptions(false)}\n              >\n                Hide\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </ButtonToolbar>\n          {isShowingOptions ? (\n            <>\n              <CodeHighlight\n                style={{ display: \"inline-table\" }}\n                language={language}\n              >\n                {options}\n              </CodeHighlight>\n              {document.queryCommandSupported(\"copy\") && (\n                <CopyToClipboard text={code} onCopy={() => {}}>\n                  <Button variant=\"info\">Copy</Button>\n                </CopyToClipboard>\n              )}\n            </>\n          ) : null}\n        </Card.Body>\n      ) : null}\n\n      {example ? (\n        <Card.Body>\n          <Card.Title>Example</Card.Title>\n          <ButtonToolbar style={{ paddingBottom: \"10px\" }}>\n            <ToggleButtonGroup type=\"radio\" name=\"example\" defaultValue={2}>\n              <ToggleButton\n                variant=\"outline-secondary\"\n                value={1}\n                onClick={() => setIsShowingExample(true)}\n              >\n                Show\n              </ToggleButton>\n              <ToggleButton\n                variant=\"outline-secondary\"\n                value={2}\n                onClick={() => setIsShowingExample(false)}\n              >\n                Hide\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </ButtonToolbar>\n          {isShowingExample ? (\n            <>\n              <CodeHighlight\n                style={{ display: \"inline-table\" }}\n                language={language}\n              >\n                {example}\n              </CodeHighlight>\n              {document.queryCommandSupported(\"copy\") && (\n                <CopyToClipboard text={code} onCopy={() => {}}>\n                  <Button variant=\"info\">Copy</Button>\n                </CopyToClipboard>\n              )}\n            </>\n          ) : null}\n        </Card.Body>\n      ) : null}\n    </Card>\n  );\n};\n\nexport default CodeCard;\n"],"sourceRoot":""}