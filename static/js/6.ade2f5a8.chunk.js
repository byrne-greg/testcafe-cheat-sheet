(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{313:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),i=n(287),r=n(1),s=n(2),c=n(4),l=n(3),p=n.n(l),u=n(5),m=function(e){function t(){return e.apply(this,arguments)||this}return Object(c.a)(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.striped,i=e.bordered,c=e.borderless,l=e.hover,u=e.size,m=e.variant,d=e.responsive,f=Object(s.a)(e,["bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive"]),x=p()(t,n,m&&t+"-"+m,u&&t+"-"+u,a&&t+"-striped",i&&t+"-bordered",c&&t+"-borderless",l&&t+"-hover"),g=o.a.createElement("table",Object(r.a)({},f,{className:x}));if(d){var h=t+"-responsive";return"string"===typeof d&&(h=h+"-"+d),o.a.createElement("div",{className:h},g)}return g},t}(o.a.Component),d=Object(u.a)(m,"table"),f=n(79),x=function(e){var t=e.cardTitle,n=e.fullDocLink,a=e.headers,r=e.rows;return o.a.createElement(i.a,{style:{overflow:"auto"}},o.a.createElement(f.a,{title:t,docLink:n}),o.a.createElement(i.a.Body,null,o.a.createElement(d,null,o.a.createElement("thead",null,o.a.createElement("tr",null,a.map(function(e){return o.a.createElement("th",{key:e},e)}))),o.a.createElement("tbody",null,r.map(function(e){return o.a.createElement("tr",{key:e[0]},e.map(function(e){return o.a.createElement("td",{key:e},e)}))})))))},g=n(78),h=n(77);t.default=function(){return o.a.createElement(x,{cardTitle:h.m.title,fullDocLink:h.m.fullDocLink,headers:["Browser","Alias"],rows:h.m.browsers.map(function(e){return[e.text,e.aliases.map(function(e){return o.a.createElement(g.a,{key:e,language:"plaintext"},e)})]})})}},77:function(e,t,n){"use strict";var a={title:"Install TestCafe",code:["npm install -D testcafe"],language:"plaintext"},o={title:"Simple Test",code:["import { Selector } from 'testcafe';\n    \n    fixture `Getting Started`\n      .page `http://devexpress.github.io/testcafe/example`;\n                \n    test('My first test', async t => {\n      // Test code\n    });"],language:"javascript"},i={title:"Running a test on multiple browsers",code:["testcafe chrome,firefox,edge src/tests/my.e2e.test.js"],language:"plaintext"},r={title:"Browser Support",browsers:[{text:"Google Chrome: Stable, Beta, Dev and Canary",aliases:["chromium","chrome","chrome-canary","chrome:headless"]},{text:"Internet Explorer (11+)",aliases:["ie"]},{text:"Microsoft Edge",aliases:["edge"]},{text:"Mozilla Firefox",aliases:["firefox","firefox:headless"]},{text:"Safari",aliases:["safari"]},{text:"Opera",aliases:["opera"]}],fullDocLink:"https://devexpress.github.io/testcafe/documentation/using-testcafe/common-concepts/browsers/browser-support.html"},s={title:"Click Action",description:"Click, Double-click, and Right-click a webpage element in a test.",code:["t.click( selector [, options] )","t.doubleClick( selector [, options]","t.rightClick( selector [, options] ))"],language:"javascript",example:"import { Selector } from 'testcafe';\n\n    const avatar = Selector('#avatar');\n    const popupMenu = Selector('#popupMenu');\n    \n    fixture `My fixture`\n        .page `http://www.example.com/`;\n    \n    test('Click a check box and check its state', async t => {\n        await t\n            .click(avatar)\n            .expect(avatar.selected).ok();\n            .doubleClick(avatar)\n            .expect(avatar.visible).ok();\n            .rightClick(avatar)\n            .expect(popupMenu.exists).notOk();\n    });",options:"{\n      modifiers: {\n          ctrl: Boolean,\n          alt: Boolean,\n          shift: Boolean,\n          meta: Boolean\n      },\n  \n      offsetX: Number,\n      offsetY: Number,\n      destinationOffsetX: Number,\n      destinationOffsetY: Number,\n      speed: Number\n  }",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/actions/click.html"},c={title:"Drag Action",description:"Drag a webpage element in a test.",code:["t.drag( selector, dragOffsetX, dragOffsetY [, options] )","t.dragToElement( selector, destinationSelector [, options] )"],language:"javascript",example:"import { Selector } from 'testcafe';\n\n  const slider = Selector('#developer-rating');\n  \n  fixture `My fixture`\n      .page `http://www.example.com/`;\n  \n  test('Drag slider', async t => {\n      await t\n          .click('#i-tried-testcafe');\n          .expect(slider.value).eql(1)\n          .drag('.ui-slider-handle', 360, 0, { offsetX: 10, offsetY: 10 })\n          .expect(slider.value).eql(7);\n          .dragToElement('.ui-slider-handle', '.developer-rating-best')\n          .expect(slider.value).eql(10);\n  });",options:"{\n      modifiers: {\n          ctrl: Boolean,\n          alt: Boolean,\n          shift: Boolean,\n          meta: Boolean\n      },\n  \n      offsetX: Number,\n      offsetY: Number,\n      destinationOffsetX: Number,\n      destinationOffsetY: Number,\n      speed: Number\n  }",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/actions/drag-element.html"},l={title:"Hover Action",description:"Hovers the mouse pointer over a webpage element.",code:["t.hover( selector [, options] )"],language:"javascript",example:"import { Selector } from 'testcafe';\n\n  const comboBox = Selector('.combo-box');\n  \n  fixture `My fixture`\n      .page `http://www.example.com/`;\n  \n  test('Select combo box value', async t => {\n      await t\n          .hover(comboBox)\n          .click('#i-prefer-both')\n          .expect(comboBox.value).eql('Both');\n  });",options:"{\n      modifiers: {\n          ctrl: Boolean,\n          alt: Boolean,\n          shift: Boolean,\n          meta: Boolean\n      },\n  \n      offsetX: Number,\n      offsetY: Number,\n      destinationOffsetX: Number,\n      destinationOffsetY: Number,\n      speed: Number\n  }",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/actions/hover.html"},p={title:"Select Action",codeSections:[{description:"Selects text in input elements of various types",code:["t.selectText( selector [, startPos] [, endPos] [, options] )"],language:"javascript",example:"import { ClientFunction, Selector } from 'testcafe';\n\n      fixture `My fixture`\n          .page `http://devexpress.github.io/testcafe/example/`;\n      \n      const developerNameInput = Selector('#developer-name');\n      \n      const getElementSelectionStart = ClientFunction(selector => selector().selectionStart);\n      const getElementSelectionEnd   = ClientFunction(selector => selector().selectionEnd);\n      \n      test('Select text within input', async t => {\n          await t\n              .typeText(developerNameInput, 'Test Cafe', { caretPos: 0 })\n              .selectText(developerNameInput, 7, 1);\n      \n          await t\n              .expect(await getElementSelectionStart(developerNameInput)).eql(1)\n              .expect(await getElementSelectionEnd(developerNameInput)).eql(7);\n      });",options:"{ speed: Number }"},{description:"Select text within a <textarea> element",code:["t.selectTextAreaContent( selector [, startLine] [, startPos] [, endLine] [, endPos] [, options] )"],language:"javascript",example:"import { ClientFunction, Selector } from 'testcafe';\n\n      fixture `My fixture`\n          .page `http://devexpress.github.io/testcafe/example/`;\n      \n      const commentTextArea = Selector('#comments');\n      \n      const getElementSelectionStart = ClientFunction(selector => selector().selectionStart);\n      const getElementSelectionEnd   = ClientFunction(selector => selector().selectionEnd);\n      \n      test('Select text within textarea', async t => {\n          await t\n              .click('#tried-test-cafe')\n              .typeText(commentTextArea, [\n                  'Lorem ipsum dolor sit amet',\n                  'consectetur adipiscing elit',\n                  'sed do eiusmod tempor'\n              ].join(',\n'))\n              .selectTextAreaContent(commentTextArea, 0, 5, 2, 10);\n      \n          await t\n              .expect(await getElementSelectionStart(commentTextArea)).eql(5)\n              .expect(await getElementSelectionEnd(commentTextArea)).eql(67);\n      });",options:"{ speed: Number }"},{description:"Select HTML elements that have the contentEditable attribute enabled.",code:["t.selectEditableContent( startSelector, endSelector [, options] )"],language:"javascript",example:"import { Selector } from 'testcafe';\n\n      fixture `My fixture`\n          .page `http://www.example.com/`;\n      \n      test('Delete text within a contentEditable element', async t => {\n          await t\n              .selectEditableContent('#foreword', '#chapter-3')\n              .pressKey('delete')\n              .expect(Selector('#chapter-2').exists).notOk()\n              .expect(Selector('#chapter-4').exists).ok();\n      });",options:"{ speed: Number }"}],fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/actions/select-text.html"},u={title:"Typing Action",description:"Types the specified text into an input element.",code:["t.typeText( selector, text [, options] )"],language:"javascript",example:"import { Selector } from 'testcafe';\n\n  const nameInput = Selector('#developer-name');\n  \n  fixture `My fixture`\n      .page `http://www.example.com/`;\n  \n  test('Type and Replace', async t => {\n      await t\n          .typeText(nameInput, 'Tony')\n          .typeText(nameInput, 'Stak', { replace: true })\n          .typeText(nameInput, 'r', { caretPos: 3 })\n          .expect(nameInput.value).eql('Stark');\n  });",options:"{\n    modifiers: {\n        ctrl: Boolean,\n        alt: Boolean,\n        shift: Boolean,\n        meta: Boolean\n    },\n\n    offsetX: Number,\n    offsetY: Number,\n    caretPos: Number,\n    replace: Boolean,\n    paste: Boolean,\n    speed: Number\n}",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/actions/type-text.html"},m={title:"Press Key Action",description:"Presses the specified keyboard keys.",code:["t.pressKey( keys [, options] )"],language:"javascript",example:"import { Selector } from 'testcafe';\n\n  const nameInput = Selector('#developer-name');\n  \n  fixture `My fixture`\n      .page `http://www.example.com/`;\n  \n  test('Key Presses', async t => {\n      await t\n          .typeText(nameInput, 'Tony Stark')\n          .pressKey('home right . delete delete delete')\n          .expect(nameInput.value).eql('T. Stark');\n  });",options:"{\n    speed: Number\n}",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/actions/press-key.html"},d={title:"Navigation Action",description:"Navigates to the specified URL.",code:["t.navigateTo( url )"],language:"javascript",example:"fixture `My fixture`\n  .page `http://www.example.com/`;\n\ntest('Navigate to the main page', async t => {\n  await t\n      .click('#submit-button')\n      .navigateTo('http://devexpress.github.io/testcafe');\n});\ntest('Navigate to local pages', async t => {\n  await t\n      .navigateTo('file:///user/my-website/index.html')\n      .navigateTo('../my-project/index.html');\n});",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/actions/navigate.html"},f={title:"Resize Window Action",description:"Resize the window to a specific pixel dimension, or to fit on the screen of the specified mobile device, or just to maximise",code:["t.resizeWindow( width, height )","t.resizeWindowToFitDevice( deviceName [, options] )","t.maximizeWindow( )"],language:"javascript",example:"import { Selector } from 'testcafe';\n\n  const menu = Selector('#side-menu');\n    \n  fixture `My fixture`\n    .page `http://www.example.com/`;\n    \n  test('Side menu disappears on small screens', async t => {\n    await t\n      .resizeWindow(200, 100)\n      .expect(menu.getStyleProperty('display')).eql('none');\n  });\n    \n  test('Header is displayed on Xperia Z in portrait', async t => {\n    await t\n      .resizeWindowToFitDevice('Sony Xperia Z', {\n        portraitOrientation: true\n      })\n      .expect(header.getStyleProperty('display')).notEql('none');\n  });\n    \n  test('Side menu is displayed in full screen', async t => {\n    await t\n      .maximizeWindow()\n      .expect(menu.visible).ok();\n  });",options:"{\n    portraitOrientation: Boolean\n    /** true for portrait - false for landscape\n  }",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/actions/resize-window.html"},x={title:"Fixtures",codeSections:[{description:"TestCafe tests must be organized into categories called fixtures. They accept a String parameter",code:["fixture( fixtureName )","fixture `fixtureName`"],language:"javascript"},{description:"Specify the web page URL as a String parameter where all tests in a fixture start.",code:["fixture.page( url )","fixture.page `url`"],language:"javascript"},{description:"Specify additional information for tests in the form of key-value metadata and use it in reports.",code:["fixture.meta({ key1: 'value1', key2: 'value2', key3: 'value3' })"],language:"javascript"},{description:"Fixture hooks that execute a function before/after each test run",code:["fixture.before( fn(ctx) )","fixture.after( fn(ctx) )"],language:"javascript"},{description:"Test hooks that execute a function before/after each test.",code:["fixture.beforeEach( fn(t) )","fixture.afterEach( fn(t) )"],language:"javascript"},{description:"Skip a feature from execution.",code:["fixture.skip"],language:"javascript"},{description:"Only execute a specific feature.",code:["fixture.only"],language:"javascript"}],fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#fixtures"},g={title:"Debug",description:"Pauses the test and allows you to debug using the browser's developer tools.",code:["t.debug()"],language:"javascript",example:"fixture `Debugger example`\n  .page `http://devexpress.github.io/testcafe/example/`;\n\ntest('Debugger', async t => {\n  await t\n      .debug()\n      .click('#populate')\n      .click('#submit-button');\n});",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/debugging.html"},h={title:"Deep Equal - Assert",description:"Asserts that actual is equal to expected.",code:["t.expect( actual ).eql( expected, message, options );"],language:"javascript",example:"import { Selector } from 'testcafe';\n\n  fixture `My fixture`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('.className').count).eql(3)\n        .expect({ a: 'bar' }).eql({ a: 'bar' }, 'this assertion will pass')\n        .expect({ a: 'bar' }).eql({ a: 'foo' }, 'this assertion will fail');\n  });",options:"{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#deep-equal"},b={title:"Not Deep Equal - Assert",description:"Asserts that actual is not equal to expected.",code:["t.expect( actual ).notEql( unexpected, message, options );"],language:"javascript",example:"import { Selector } from 'testcafe';\n\n  fixture `My fixture`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('.className').count).notEql(2)\n        .expect({ a: 'bar' }).notEql({ a: 'bar' }, 'this assertion will fail')\n        .expect({ a: 'bar' }).notEql({ a: 'foo' }, 'this assertion will pass');\n  });",options:"{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#not-deep-equal"},v={title:"Contains - Assert",description:"Asserts that actual is not equal to expected.",code:["t.expect( actual ).contains( expected, message, options );"],language:"javascript",example:"import { ClientFunction } from 'testcafe';\n\n  fixture `My fixture`;\n  \n  test('My test', async t => {\n    const getLocation = ClientFunction(() => document.location.href.toString());\n\n    await t\n        .expect(getLocation()).contains('example.com')\n        .expect('foo bar').contains('bar', 'string contains the expected substring')\n        .expect([1, 2, 3]).contains(2, 'array contains the expected value')\n        .expect({ foo: 'bar', hello: 'universe' }).contains({ foo: 'bar' }, 'object contains the expected property');\n  });",options:"{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#contains"},y={title:"Not Contains - Assert",description:"Asserts that actual does not contain expected.",code:["t.expect( actual ).notContains( unexpected, message, options );"],language:"javascript",example:"import { ClientFunction } from 'testcafe';\n\n  fixture `My fixture`;\n  \n  test('My test', async t => {\n    const getLocation = ClientFunction(() => document.location.href.toString());\n\n    await t\n        .expect(getLocation()).notContains('google.com')\n        .expect('foo bar').notContains('baz', 'string does not contain a substring')\n        .expect([1, 2, 3]).notContains(4, 'array does not contain a value')\n        .expect({ foo: 'bar', hello: 'universe' }).notContains({ buzz: 'abc' }, 'object does not contain a property');\n  });",options:"{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }",fullDocLink:"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#not-contains"};n.d(t,"p",function(){return a}),n.d(t,"r",function(){return o}),n.d(t,"q",function(){return i}),n.d(t,"m",function(){return r}),n.d(t,"a",function(){return s}),n.d(t,"b",function(){return c}),n.d(t,"c",function(){return l}),n.d(t,"g",function(){return p}),n.d(t,"h",function(){return u}),n.d(t,"e",function(){return m}),n.d(t,"d",function(){return d}),n.d(t,"f",function(){return f}),n.d(t,"o",function(){return x}),n.d(t,"n",function(){return g}),n.d(t,"j",function(){return h}),n.d(t,"l",function(){return b}),n.d(t,"i",function(){return v}),n.d(t,"k",function(){return y})},78:function(e,t,n){"use strict";var a=n(0),o=n.n(a),i=n(82),r=n(311),s=n(291),c=function(e){var t=e.children,n=e.language;return o.a.createElement(r.a,{language:n,style:s.a},t)};n.d(t,"b",function(){return p}),n.d(t,"a",function(){return l});var l=function(e){var t=e.children,n=e.language;return o.a.createElement(o.a.Fragment,null,document.queryCommandSupported("copy")?o.a.createElement(i.CopyToClipboard,{text:t,onCopy:function(){}},o.a.createElement("div",{style:{cursor:"copy"}},o.a.createElement(c,{language:n},t))):o.a.createElement(c,{language:n},t))},p=function(e){var t=e.code,n=e.language;return o.a.createElement(o.a.Fragment,null,t.map(function(e){return o.a.createElement(l,{key:"".concat(n,"-").concat(e.substring(0,24)),language:n},e)}))}},79:function(e,t,n){"use strict";var a=n(0),o=n.n(a),i=n(287),r=n(285),s=function(e){var t=e.href,n=e.children;return o.a.createElement("a",{href:t,target:"_blank",rel:"noopener noreferrer"},n)};t.a=function(e){var t=e.docLink,n=e.title;return o.a.createElement(i.a.Header,null,o.a.createElement("div",{style:{display:"flex",flexWrap:"wrap",justifyContent:"space-between",alignItems:"center"}},n,t&&o.a.createElement(s,{href:t},o.a.createElement(r.a,{variant:"info"},"Documentation"))))}}}]);
//# sourceMappingURL=6.ade2f5a8.chunk.js.map