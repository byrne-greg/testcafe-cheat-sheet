{"version":3,"sources":["snippets/install.js","snippets/simpleTest.js","snippets/runningTest.js","snippets/skippingTests.js","snippets/browserSupport.js","snippets/actions_click.js","snippets/actions_drag.js","snippets/actions_hover.js","snippets/actions_select.js","snippets/actions_typeText.js","snippets/actions_pressKey.js","snippets/actions_navigate.js","snippets/actions_resizeWindow.js","snippets/actions_takeScreenshot.js","snippets/fixture.js","snippets/debug.js","snippets/assert_within.js","snippets/assert_notWithin.js","snippets/assert_ok.js","snippets/assert_notOk.js","snippets/assert_typeOf.js","snippets/assert_notTypeOf.js","snippets/assert_deepEqual.js","snippets/assert_notDeepEqual.js","snippets/assert_match.js","snippets/assert_notMatch.js","snippets/assert_contains.js","snippets/assert_notContains.js","snippets/assert_lessThan.js","snippets/assert_lessThanEqualTo.js","snippets/assert_greaterThan.js","snippets/assert_greaterThanEqualTo.js","snippets/index.js","base_components/CodeSyntaxHighlighter.js","base_components/CodeHighlight.js","base_components/BaseLink.js","base_components/CardHeader.js"],"names":["snippet","title","code","language","fullDocLink","codeSections","description","browserSupport","browsers","text","aliases","example","options","__webpack_require__","d","__webpack_exports__","install","simpleTest","runningTest","skippingTests","snippets_browserSupport","actions_click","actions_drag","actions_hover","actions_select","actions_typeText","actions_pressKey","actions_navigate","actions_resizeWindow","actions_takeScreenshot","fixture","debug","assert_within","assert_notWithin","assert_ok","assert_notOk","assert_typeOf","assert_notTypeOf","assert_deepEqual","assert_notDeepEqual","assert_match","assert_notMatch","assert_contains","assert_notContains","assert_lessThan","assert_lessThanEqualTo","assert_greaterThan","assert_greaterThanEqualTo","CodeSyntaxHighlighter","props","children","react_default","a","createElement","default_highlight","style","vs2015","CodeHighlight_MultiCodeHighlight","CodeHighlight_CodeHighlight","CodeHighlight","_ref","Fragment","document","queryCommandSupported","lib","onCopy","cursor","base_components_CodeSyntaxHighlighter","MultiCodeHighlight","_ref2","map","codeItem","key","concat","substring","BaseLink","href","target","rel","CardHeader","docLink","Card","Header","display","flexWrap","justifyContent","alignItems","base_components_BaseLink","Button","variant"],"mappings":"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","file":"static/js/1.1fab91a5.chunk.js","sourcesContent":["const snippet = {\n  title: \"Install TestCafe\",\n  code: [`npm install -D testcafe`],\n  language: `plaintext`\n};\nexport default snippet;\n","const snippet = {\n  title: \"Simple Test\",\n  code: [\n    `import { Selector } from 'testcafe';\n    \n    fixture \\`Getting Started\\`\n      .page \\`http://devexpress.github.io/testcafe/example\\`;\n                \n    test('My first test', async t => {\n      // Test code\n    });`\n  ],\n  language: \"javascript\"\n};\nexport default snippet;\n","const snippet = {\n  title: \"Running a test on multiple browsers\",\n  code: [`testcafe chrome,firefox,edge src/tests/my.e2e.test.js`],\n  language: `plaintext`\n};\nexport default snippet;\n","const snippet = {\n  title: \"Skipping Tests\",\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#skipping-tests\",\n  codeSections: [\n    {\n      description:\n        \"Specify that a particular test or fixture should be skipped when running tests.\",\n      code: [\"fixture.skip\", \"test.skip\"],\n      language: `javascript`\n    },\n    {\n      description:\n        \"Specify that only a particular test or fixture should run while all others should be skipped.\",\n      code: [\"fixture.only\", \"test.only\"],\n      language: `javascript`\n    }\n  ]\n};\n\nexport default snippet;\n","const browserSupport = {\n  title: \"Browser Support\",\n  browsers: [\n    {\n      text: \"Google Chrome: Stable, Beta, Dev and Canary\",\n      aliases: [\"chromium\", \"chrome\", \"chrome-canary\", \"chrome:headless\"]\n    },\n    { text: \"Internet Explorer (11+)\", aliases: [\"ie\"] },\n    { text: \"Microsoft Edge\", aliases: [\"edge\"] },\n    { text: \"Mozilla Firefox\", aliases: [\"firefox\", \"firefox:headless\"] },\n    { text: \"Safari\", aliases: [\"safari\"] },\n    { text: \"Opera\", aliases: [\"opera\"] }\n  ],\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/using-testcafe/common-concepts/browsers/browser-support.html\"\n};\nexport default browserSupport;\n","const snippet = {\n  title: \"Click - Action\",\n  description:\n    \"Click, Double-click, and Right-click a webpage element in a test.\",\n  code: [\n    \"t.click( selector [, options] )\",\n    \"t.doubleClick( selector [, options]\",\n    \"t.rightClick( selector [, options] ))\"\n  ],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n    const avatar = Selector('#avatar');\n    const popupMenu = Selector('#popupMenu');\n    \n    fixture \\`My fixture\\`\n        .page \\`http://www.example.com/\\`;\n    \n    test('Click a check box and check its state', async t => {\n        await t\n            .click(avatar)\n            .expect(avatar.selected).ok();\n            .doubleClick(avatar)\n            .expect(avatar.visible).ok();\n            .rightClick(avatar)\n            .expect(popupMenu.exists).notOk();\n    });`,\n  options: `{\n      modifiers: {\n          ctrl: Boolean,\n          alt: Boolean,\n          shift: Boolean,\n          meta: Boolean\n      },\n  \n      offsetX: Number,\n      offsetY: Number,\n      destinationOffsetX: Number,\n      destinationOffsetY: Number,\n      speed: Number\n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/actions/click.html\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Drag - Action\",\n  description: \"Drag a webpage element in a test.\",\n  code: [\n    \"t.drag( selector, dragOffsetX, dragOffsetY [, options] )\",\n    \"t.dragToElement( selector, destinationSelector [, options] )\"\n  ],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  const slider = Selector('#developer-rating');\n  \n  fixture \\`My fixture\\`\n      .page \\`http://www.example.com/\\`;\n  \n  test('Drag slider', async t => {\n      await t\n          .click('#i-tried-testcafe');\n          .expect(slider.value).eql(1)\n          .drag('.ui-slider-handle', 360, 0, { offsetX: 10, offsetY: 10 })\n          .expect(slider.value).eql(7);\n          .dragToElement('.ui-slider-handle', '.developer-rating-best')\n          .expect(slider.value).eql(10);\n  });`,\n  options: `{\n      modifiers: {\n          ctrl: Boolean,\n          alt: Boolean,\n          shift: Boolean,\n          meta: Boolean\n      },\n  \n      offsetX: Number,\n      offsetY: Number,\n      destinationOffsetX: Number,\n      destinationOffsetY: Number,\n      speed: Number\n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/actions/drag-element.html\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Hover - Action\",\n  description: \"Hovers the mouse pointer over a webpage element.\",\n  code: [\"t.hover( selector [, options] )\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  const comboBox = Selector('.combo-box');\n  \n  fixture \\`My fixture\\`\n      .page \\`http://www.example.com/\\`;\n  \n  test('Select combo box value', async t => {\n      await t\n          .hover(comboBox)\n          .click('#i-prefer-both')\n          .expect(comboBox.value).eql('Both');\n  });`,\n  options: `{\n      modifiers: {\n          ctrl: Boolean,\n          alt: Boolean,\n          shift: Boolean,\n          meta: Boolean\n      },\n  \n      offsetX: Number,\n      offsetY: Number,\n      destinationOffsetX: Number,\n      destinationOffsetY: Number,\n      speed: Number\n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/actions/hover.html\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Select - Action\",\n  codeSections: [\n    {\n      description: \"Selects text in input elements of various types\",\n      code: [\"t.selectText( selector [, startPos] [, endPos] [, options] )\"],\n      language: `javascript`,\n      example: `import { ClientFunction, Selector } from 'testcafe';\n\n      fixture \\`My fixture\\`\n          .page \\`http://devexpress.github.io/testcafe/example/\\`;\n      \n      const developerNameInput = Selector('#developer-name');\n      \n      const getElementSelectionStart = ClientFunction(selector => selector().selectionStart);\n      const getElementSelectionEnd   = ClientFunction(selector => selector().selectionEnd);\n      \n      test('Select text within input', async t => {\n          await t\n              .typeText(developerNameInput, 'Test Cafe', { caretPos: 0 })\n              .selectText(developerNameInput, 7, 1);\n      \n          await t\n              .expect(await getElementSelectionStart(developerNameInput)).eql(1)\n              .expect(await getElementSelectionEnd(developerNameInput)).eql(7);\n      });`,\n      options: `{ speed: Number }`\n    },\n    {\n      description: \"Select text within a <textarea> element\",\n      code: [\n        \"t.selectTextAreaContent( selector [, startLine] [, startPos] [, endLine] [, endPos] [, options] )\"\n      ],\n      language: `javascript`,\n      example: `import { ClientFunction, Selector } from 'testcafe';\n\n      fixture \\`My fixture\\`\n          .page \\`http://devexpress.github.io/testcafe/example/\\`;\n      \n      const commentTextArea = Selector('#comments');\n      \n      const getElementSelectionStart = ClientFunction(selector => selector().selectionStart);\n      const getElementSelectionEnd   = ClientFunction(selector => selector().selectionEnd);\n      \n      test('Select text within textarea', async t => {\n          await t\n              .click('#tried-test-cafe')\n              .typeText(commentTextArea, [\n                  'Lorem ipsum dolor sit amet',\n                  'consectetur adipiscing elit',\n                  'sed do eiusmod tempor'\n              ].join(',\\n'))\n              .selectTextAreaContent(commentTextArea, 0, 5, 2, 10);\n      \n          await t\n              .expect(await getElementSelectionStart(commentTextArea)).eql(5)\n              .expect(await getElementSelectionEnd(commentTextArea)).eql(67);\n      });`,\n      options: `{ speed: Number }`\n    },\n    {\n      description:\n        \"Select HTML elements that have the contentEditable attribute enabled.\",\n      code: [\n        \"t.selectEditableContent( startSelector, endSelector [, options] )\"\n      ],\n      language: `javascript`,\n      example: `import { Selector } from 'testcafe';\n\n      fixture \\`My fixture\\`\n          .page \\`http://www.example.com/\\`;\n      \n      test('Delete text within a contentEditable element', async t => {\n          await t\n              .selectEditableContent('#foreword', '#chapter-3')\n              .pressKey('delete')\n              .expect(Selector('#chapter-2').exists).notOk()\n              .expect(Selector('#chapter-4').exists).ok();\n      });`,\n      options: `{ speed: Number }`\n    }\n  ],\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/actions/select-text.html\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Typing - Action\",\n  description: \"Types the specified text into an input element.\",\n  code: [\"t.typeText( selector, text [, options] )\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  const nameInput = Selector('#developer-name');\n  \n  fixture \\`My fixture\\`\n      .page \\`http://www.example.com/\\`;\n  \n  test('Type and Replace', async t => {\n      await t\n          .typeText(nameInput, 'Tony')\n          .typeText(nameInput, 'Stak', { replace: true })\n          .typeText(nameInput, 'r', { caretPos: 3 })\n          .expect(nameInput.value).eql('Stark');\n  });`,\n  options: `{\n    modifiers: {\n        ctrl: Boolean,\n        alt: Boolean,\n        shift: Boolean,\n        meta: Boolean\n    },\n\n    offsetX: Number,\n    offsetY: Number,\n    caretPos: Number,\n    replace: Boolean,\n    paste: Boolean,\n    speed: Number\n}`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/actions/type-text.html\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Press Key - Action\",\n  description: \"Presses the specified keyboard keys.\",\n  code: [\"t.pressKey( keys [, options] )\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  const nameInput = Selector('#developer-name');\n  \n  fixture \\`My fixture\\`\n      .page \\`http://www.example.com/\\`;\n  \n  test('Key Presses', async t => {\n      await t\n          .typeText(nameInput, 'Tony Stark')\n          .pressKey('home right . delete delete delete')\n          .expect(nameInput.value).eql('T. Stark');\n  });`,\n  options: `{\n    speed: Number\n}`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/actions/press-key.html\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Navigation - Action\",\n  description: \"Navigates to the specified URL.\",\n  code: [\"t.navigateTo( url )\"],\n  language: `javascript`,\n  example: `fixture \\`My fixture\\`\n  .page \\`http://www.example.com/\\`;\n\ntest('Navigate to the main page', async t => {\n  await t\n      .click('#submit-button')\n      .navigateTo('http://devexpress.github.io/testcafe');\n});\ntest('Navigate to local pages', async t => {\n  await t\n      .navigateTo('file:///user/my-website/index.html')\n      .navigateTo('../my-project/index.html');\n});`,\n\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/actions/navigate.html\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Resize Window - Action\",\n  description:\n    \"Resize the window to a specific pixel dimension, or to fit on the screen of the specified mobile device, or just to maximise\",\n  code: [\n    \"t.resizeWindow( width, height )\",\n    \"t.resizeWindowToFitDevice( deviceName [, options] )\",\n    \"t.maximizeWindow( )\"\n  ],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  const menu = Selector('#side-menu');\n    \n  fixture \\`My fixture\\`\n    .page \\`http://www.example.com/\\`;\n    \n  test('Side menu disappears on small screens', async t => {\n    await t\n      .resizeWindow(200, 100)\n      .expect(menu.getStyleProperty('display')).eql('none');\n  });\n    \n  test('Header is displayed on Xperia Z in portrait', async t => {\n    await t\n      .resizeWindowToFitDevice('Sony Xperia Z', {\n        portraitOrientation: true\n      })\n      .expect(header.getStyleProperty('display')).notEql('none');\n  });\n    \n  test('Side menu is displayed in full screen', async t => {\n    await t\n      .maximizeWindow()\n      .expect(menu.visible).ok();\n  });`,\n  options: `{\n    portraitOrientation: Boolean\n    /** true for portrait - false for landscape\n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/actions/resize-window.html\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Take Screenshot - Action\",\n  description: \"Take screenshots of the tested page.\",\n  code: [\"t.takeScreenshot( [path] )\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`\n      .page \\`http://devexpress.github.io/testcafe/example/\\`;\n  \n  test('Take a screenshot of a fieldset', async t => {\n      await t\n          .typeText('#developer-name', 'Tony Stark')\n          .click('#submit-button')\n          .takeScreenshot('my-fixture/thank-you-page.png')\n          .takeElementScreenshot(Selector('fieldset').nth(1), 'my-fixture/important-features.png')\n          .takeElementScreenshot('#avatar', {\n            includeMargins: true,\n            crop: {\n                top: -100,\n                left: 10,\n                bottom: 30,\n                right: 200\n            }\n        });\n  });`,\n  options: `{\n    scrollTargetX: Number,\n    scrollTargetY: Number,\n    includeMargins: Boolean,\n    includeBorders: Boolean,\n    includePaddings: Boolean,\n    crop: {\n        top: Number,\n        left: Number,\n        bottom: Number,\n        right: Number\n    },\n}`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/actions/take-screenshot.html\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Fixtures\",\n  codeSections: [\n    {\n      description:\n        \"TestCafe tests must be organized into categories called fixtures. They accept a String parameter\",\n      code: [\"fixture( fixtureName )\", \"fixture `fixtureName`\"],\n      language: `javascript`\n    },\n    {\n      description:\n        \"Specify the web page URL as a String parameter where all tests in a fixture start.\",\n      code: [\"fixture.page( url )\", \"fixture.page `url`\"],\n      language: `javascript`\n    },\n    {\n      description:\n        \"Specify additional information for tests in the form of key-value metadata and use it in reports.\",\n      code: [\n        \"fixture.meta({ key1: 'value1', key2: 'value2', key3: 'value3' })\"\n      ],\n      language: `javascript`\n    },\n    {\n      description:\n        \"Fixture hooks that execute a function before/after each test run\",\n      code: [\"fixture.before( fn(ctx) )\", \"fixture.after( fn(ctx) )\"],\n      language: `javascript`\n    },\n    {\n      description: \"Test hooks that execute a function before/after each test.\",\n      code: [\"fixture.beforeEach( fn(t) )\", \"fixture.afterEach( fn(t) )\"],\n      language: `javascript`\n    },\n    {\n      description: \"Skip a feature from execution.\",\n      code: [\"fixture.skip\"],\n      language: `javascript`\n    },\n    {\n      description: \"Only execute a specific feature.\",\n      code: [\"fixture.only\"],\n      language: `javascript`\n    }\n  ],\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#fixtures\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Debug\",\n  description:\n    \"Pauses the test and allows you to debug using the browser's developer tools.\",\n  code: [\"t.debug()\"],\n  language: `javascript`,\n  example: `fixture \\`Debugger example\\`\n  .page \\`http://devexpress.github.io/testcafe/example/\\`;\n\ntest('Debugger', async t => {\n  await t\n      .debug()\n      .click('#populate')\n      .click('#submit-button');\n});`,\n\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/debugging.html\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Within - Assert\",\n  description:\n    \"Asserts that actual is within a range from start to finish. Bounds are inclusive.\",\n  code: [\"t.expect( actual ).within( start, finish, message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('#element').scrollTop).within(300, 400)\n        .expect(5).within(3, 10, 'this assertion will pass');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#within\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Not Within - Assert\",\n  description:\n    \"Asserts that actual is not within a range from start to finish. Bounds are inclusive.\",\n  code: [\"t.expect( actual ).notWithin( start, finish, message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('#element').scrollTop).notWithin(100, 200)\n        .expect(1).notWithin(3, 10, 'this assertion will pass');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#not-within\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Ok - Assert\",\n  description: \"Asserts that actual is true.\",\n  code: [\"t.expect( actual ).ok( message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('#element').exists).ok()\n        .expect('ok').ok('this assertion will pass')\n        .expect(false).ok('this assertion will fail');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#ok\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Not Ok - Assert\",\n  description: \"Asserts that actual is false.\",\n  code: [\"t.expect( actual ).notOk( message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('#element').exists).notOk()\n        .expect('ok').notOk('this assertion will fail')\n        .expect(false).notOk('this assertion will pass');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#not-ok\"\n};\n\nexport default snippet;\n","/* eslint-disable no-useless-escape */\nconst snippet = {\n  title: \"Type Of - Assert\",\n  description: \"Asserts that the actual type is typeName.\",\n  code: [\"t.expect( actual ).typeOf( typeName, message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n   \n    await t\n        .expect(Selector('#element').getAttribute('attr')).typeOf('string')\n        .expect({ a: 'bar' }).typeOf('object', 'it\\'s an object')\n        .expect(/bar/).typeOf('regexp', 'it\\'s a regular expression')\n        .expect(null).typeOf('null', 'it\\'s a null');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#type-of\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Not Type Of - Assert\",\n  description: \"Asserts that the actual type is not typeName.\",\n  code: [\"t.expect( actual ).notTypeOf( typeName, message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n   \n    await t\n        .expect(Selector('#element').getAttribute('attr')).notTypeOf('null')\n        .expect('bar').notTypeOf('number', 'string is not a number');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#not-type-of\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Deep Equal - Assert\",\n  description: \"Asserts that actual is equal to expected.\",\n  code: [\"t.expect( actual ).eql( expected, message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('.className').count).eql(3)\n        .expect({ a: 'bar' }).eql({ a: 'bar' }, 'this assertion will pass')\n        .expect({ a: 'bar' }).eql({ a: 'foo' }, 'this assertion will fail');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#deep-equal\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Not Deep Equal - Assert\",\n  description: \"Asserts that actual is not equal to expected.\",\n  code: [\"t.expect( actual ).notEql( unexpected, message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('.className').count).notEql(2)\n        .expect({ a: 'bar' }).notEql({ a: 'bar' }, 'this assertion will fail')\n        .expect({ a: 'bar' }).notEql({ a: 'foo' }, 'this assertion will pass');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#not-deep-equal\"\n};\n\nexport default snippet;\n","/* eslint-disable no-useless-escape */\nconst snippet = {\n  title: \"Match - Assert\",\n  description: \"Asserts that actual matches the 're' regular expression.\",\n  code: [\"t.expect( actual ).match( re, message, options );\"],\n  language: `javascript`,\n  example: `import { ClientFunction } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      const getLocation = ClientFunction(() => document.location.href.toString());\n      \n      await t\n        .expect(getLocation()).match(/\\.com/)\n        .expect('foobar').match(/^f/, 'this assertion will be passed');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#match\"\n};\n\nexport default snippet;\n","/* eslint-disable no-useless-escape */\nconst snippet = {\n  title: \"Not Match - Assert\",\n  description:\n    \"Asserts that actual does not matches the 're' regular expression.\",\n  code: [\"t.expect( actual ).notMatch( re, message, options );\"],\n  language: `javascript`,\n  example: `import { ClientFunction } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      const getLocation = ClientFunction(() => document.location.href.toString());\n      \n      await t\n        .expect(getLocation()).notMatch(/\\.ie/)\n        .expect('foobar').notMatch(/^b/, 'this assertion will be passed');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#not-match\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Contains - Assert\",\n  description: \"Asserts that actual is not equal to expected.\",\n  code: [\"t.expect( actual ).contains( expected, message, options );\"],\n  language: `javascript`,\n  example: `import { ClientFunction } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n    const getLocation = ClientFunction(() => document.location.href.toString());\n\n    await t\n        .expect(getLocation()).contains('example.com')\n        .expect('foo bar').contains('bar', 'string contains the expected substring')\n        .expect([1, 2, 3]).contains(2, 'array contains the expected value')\n        .expect({ foo: 'bar', hello: 'universe' }).contains({ foo: 'bar' }, 'object contains the expected property');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#contains\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Not Contains - Assert\",\n  description: \"Asserts that actual does not contain expected.\",\n  code: [\"t.expect( actual ).notContains( unexpected, message, options );\"],\n  language: `javascript`,\n  example: `import { ClientFunction } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n    const getLocation = ClientFunction(() => document.location.href.toString());\n\n    await t\n        .expect(getLocation()).notContains('google.com')\n        .expect('foo bar').notContains('baz', 'string does not contain a substring')\n        .expect([1, 2, 3]).notContains(4, 'array does not contain a value')\n        .expect({ foo: 'bar', hello: 'universe' }).notContains({ buzz: 'abc' }, 'object does not contain a property');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#not-contains\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Less Than - Assert\",\n  description: \"Asserts that actual is less than expected.\",\n  code: [\"t.expect( actual ).lt( expected, message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('#element').offsetHeight).lt(25)\n        .expect(2).lt(5, '2 is less than 5');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#less-than\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Less Than or Equal To - Assert\",\n  description: \"Asserts that actual is less than or equal to expected.\",\n  code: [\"t.expect( actual ).lte( expected, message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('#element').offsetHeight).lte(400)\n        .expect(2).lte(5, '2 is less or equal than 5')\n        .expect(2).lte(2, '2 is less or equal than 2 ');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#less-than-or-equal-to\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Greater Than - Assert\",\n  description: \"Asserts that actual is greater than expected.\",\n  code: [\"t.expect( actual ).gt( expected, message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('#element').clientWidth).gt(300)\n        .expect(5).gt(2, '5 is greater than 2');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#greater-than\"\n};\n\nexport default snippet;\n","const snippet = {\n  title: \"Greater Than or Equal To - Assert\",\n  description: \"Asserts that actual is greater than or equal to expected.\",\n  code: [\"t.expect( actual ).gte( expected, message, options );\"],\n  language: `javascript`,\n  example: `import { Selector } from 'testcafe';\n\n  fixture \\`My fixture\\`;\n  \n  test('My test', async t => {\n      await t\n        .expect(Selector('#element').clientWidth).gte(50)\n        .expect(5).gte(2, '5 is greater or equal than 2')\n        .expect(2).gte(2, '2 is greater or equal than 2 ');\n  });`,\n  options: `{ \n    timeout: Number,\n      allowUnawaitedPromise: Boolean \n  }`,\n  fullDocLink:\n    \"https://devexpress.github.io/testcafe/documentation/test-api/assertions/assertion-api.html#greater-than-or-equal-to\"\n};\n\nexport default snippet;\n","export { default as install } from \"./install\";\nexport { default as simpleTest } from \"./simpleTest\";\nexport { default as runningTest } from \"./runningTest\";\nexport { default as skippingTests } from \"./skippingTests\";\nexport { default as browserSupport } from \"./browserSupport\";\nexport { default as actions_click } from \"./actions_click\";\nexport { default as actions_drag } from \"./actions_drag\";\nexport { default as actions_hover } from \"./actions_hover\";\nexport { default as actions_select } from \"./actions_select\";\nexport { default as actions_typeText } from \"./actions_typeText\";\nexport { default as actions_pressKey } from \"./actions_pressKey\";\nexport { default as actions_navigate } from \"./actions_navigate\";\nexport { default as actions_resizeWindow } from \"./actions_resizeWindow\";\nexport { default as actions_takeScreenshot } from \"./actions_takeScreenshot\";\nexport { default as fixture } from \"./fixture\";\nexport { default as debug } from \"./debug\";\nexport { default as assert_within } from \"./assert_within\";\nexport { default as assert_notWithin } from \"./assert_notWithin\";\nexport { default as assert_ok } from \"./assert_ok\";\nexport { default as assert_notOk } from \"./assert_notOk\";\nexport { default as assert_typeOf } from \"./assert_typeOf\";\nexport { default as assert_notTypeOf } from \"./assert_notTypeOf\";\nexport { default as assert_deepEqual } from \"./assert_deepEqual\";\nexport { default as assert_notDeepEqual } from \"./assert_notDeepEqual\";\nexport { default as assert_match } from \"./assert_match\";\nexport { default as assert_notMatch } from \"./assert_notMatch\";\nexport { default as assert_contains } from \"./assert_contains\";\nexport { default as assert_notContains } from \"./assert_notContains\";\nexport { default as assert_lessThan } from \"./assert_lessThan\";\nexport { default as assert_lessThanEqualTo } from \"./assert_lessThanEqualTo\";\nexport { default as assert_greaterThan } from \"./assert_greaterThan\";\nexport {\n  default as assert_greaterThanEqualTo\n} from \"./assert_greaterThanEqualTo\";\n","import React from \"react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { vs2015 } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nconst CodeSyntaxHighlighter = props => {\n  const { children, language } = props;\n  return (\n    <SyntaxHighlighter language={language} style={vs2015}>\n      {children}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeSyntaxHighlighter;\n","import React from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport CodeSyntaxHighlighter from \"./CodeSyntaxHighlighter\";\n\nconst CodeHighlight = ({ children, language }) => (\n  <>\n    {document.queryCommandSupported(\"copy\") ? (\n      <CopyToClipboard text={children} onCopy={() => {}}>\n        <div style={{ cursor: \"copy\" }}>\n          <CodeSyntaxHighlighter language={language}>\n            {children}\n          </CodeSyntaxHighlighter>\n        </div>\n      </CopyToClipboard>\n    ) : (\n      <CodeSyntaxHighlighter language={language}>\n        {children}\n      </CodeSyntaxHighlighter>\n    )}\n  </>\n);\n\nconst MultiCodeHighlight = ({ code, language }) => (\n  <>\n    {code.map(codeItem => (\n      <CodeHighlight\n        key={`${language}-${codeItem.substring(0, 24)}`}\n        language={language}\n      >\n        {codeItem}\n      </CodeHighlight>\n    ))}\n  </>\n);\n\nexport { MultiCodeHighlight, CodeHighlight };\n","import React from \"react\";\n\nconst BaseLink = ({ href, children }) => (\n  <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n    {children}\n  </a>\n);\n\nexport default BaseLink;\n","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport BaseLink from \"./BaseLink\";\n\nconst CardHeader = ({ docLink, title }) => (\n  <Card.Header>\n    <div\n      style={{\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n      }}\n    >\n      {title}\n      {docLink && (\n        <BaseLink href={docLink}>\n          <Button variant=\"info\">Documentation</Button>\n        </BaseLink>\n      )}\n    </div>\n  </Card.Header>\n);\n\nexport default CardHeader;\n"],"sourceRoot":""}